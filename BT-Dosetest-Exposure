# -*- coding: utf-8 -*-
"""
Created on 2021/March/17

@author: Franck

Creation of a dose test matrix for different bowties size and spacing:
    16 dose factors ranging from x1 to x2.5 step 0.1
    17 sizes
    5 spacing
All the bowties are in the same cell (AREF function do not allows dose factor variation)
Text was added at:
    the bottom of each combination matrix: size /spacing
    the end of each line coresponding: dose factor
All dimensions are in micrometers
Future of this test:
    Dose factor will be determined by making automatic imaging / manual measurement
    As soon as dose factor is determined for each bowtie size/spacing combination,
    a specific and more compact program should be made using a new function
    creating bowties matrix  100x100um using the results [size, space, dose] of this program

"""

import gdspy
import math


def lineOfBowties(sideLength, space, df):
    'Line of identical bowties creation using their size (sidelength), spacing (space) and dose factor (df)'

    # triangle height calculation
    height = sideLength*math.sqrt(3)/2

    # polygon creation of the first bowtie triangle
    points_1 = [(0, 0), (sideLength, 0), (sideLength/2, height)]
    tie_1 = gdspy.Polygon(points_1)

    # polygon creation of the second bowtie triangle
    points_2 = [((sideLength/2), (height + space)), (sideLength, ((2*height)+space)), (0, ((2*height)+space))]
    tie_2 = gdspy.Polygon(points_2)

    # assembling the 2 ties with the right spacing to create the bowtie
    BT = gdspy.boolean(tie_1, tie_2, 'xor', layer=1, datatype=(int(df*1000)))
    copies_BT = ()

    # create a line of bowties over 25um max.
    for i in range(int(25/(sideLength + space))):
        copy_BT = gdspy.copy(BT, (i*(sideLength + space)))
        copies_BT = gdspy.boolean(copies_BT, copy_BT, 'xor', layer=1, datatype=df)
    #
    return (copies_BT)

# Doses test organization :
#   1 bowtie size/distance combination is repeated over 25um in X direction
#   each previous line is repeated in Y with a different dose
#   each size/distance combination test dose is located every 50um in X and Y
#   all the bowties of the same size are on the same line (offsetX variation) with different spacing d
#   offsetY is used to locate the different bowtie size in Y


gdspy.current_library = gdspy.GdsLibrary()


# parameters initialization:
# triangle side length list, distance list, doe factor list, line separation, x & Y position offset
sideLengthList = [2, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]
dList = [0.02, 0.04, 0.06, 0.08, 0.1]
dfList = [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5]
lineDist = 0
offsetX = 0
offsetY = 0
#

# library opening
all_BTs = gdspy.GdsLibrary().new_cell('All_BTs')
#

# program's core:
#

# loop on the different side-length
for i in range(len(sideLengthList)):
    sideLength = sideLengthList[i]
    offsetY = i*100
    lineDist = 2 + (sideLength*math.sqrt(3))
    # loop on the distance list
    for j in range(len(dList)):
        offsetX = j*50
        # add text BT size/space at X=5 et Y=-5 for each group of dose test
        htextGroup = gdspy.Text(str(sideLength)+'/'+str(dList[j]), 2, position=(5+offsetX, offsetY-5), datatype=1500)
        all_BTs.add(htextGroup)
        # loop on dose factor
        for k in range(16):
            df = 1000 + (k*100)
            lOB = lineOfBowties(sideLength, dList[j], df)
            lOB.translate(offsetX, offsetY+(k*lineDist))
            all_BTs.add(lOB)
            # add text at end of each dose factor line in X=27um
            htextLigne = gdspy.Text(str(k+1), 2, position=(27+offsetX, offsetY-0.444+(k*lineDist)), datatype=1500)
            all_BTs.add(htextLigne)

# ------------------------------------------------------------------ #
#      SAVE
# ------------------------------------------------------------------ #
# Save all created cells in file
gdspy.write_gds('BTs_cellgeneration_TestDoses_FC_Text2.gds')
